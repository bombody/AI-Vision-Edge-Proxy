
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: video_streaming.proto

package chrys_cloud_videostreaming_v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Annotation messages
type AnnotateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName       string        `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`                          // required: device name (required) identity of device
	RemoteStreamId   string        `protobuf:"bytes,2,opt,name=remote_stream_id,json=remoteStreamId,proto3" json:"remote_stream_id,omitempty"`            //optional: if associated with storage, the ID of Chrysalis Cloud deviceID
	Type             string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                        // required: event type: e.g. moving, exit, entry, stopped, parked, ...
	StartTimestamp   int64         `protobuf:"varint,4,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`             //required: start of the event
	EndTimestamp     int64         `protobuf:"varint,5,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`                   // optional: event of the event
	ObjectType       string        `protobuf:"bytes,6,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`                          // optional: e.g. person, car, face, bag, roadsign,...
	ObjectId         string        `protobuf:"bytes,7,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`                                // optional: e.g. object id from the ML model
	ObjectTrackingId string        `protobuf:"bytes,8,opt,name=object_tracking_id,json=objectTrackingId,proto3" json:"object_tracking_id,omitempty"`      // optional: tracking id of the object
	Confidence       float64       `protobuf:"fixed64,9,opt,name=confidence,proto3" json:"confidence,omitempty"`                                          // confidence of inference [0-1.0]
	ObjectBoudingBox *BoudingBox   `protobuf:"bytes,10,opt,name=object_bouding_box,json=objectBoudingBox,proto3" json:"object_bouding_box,omitempty"`     // optional: object bounding box
	Location         *Location     `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`                                               // optional: object GEO location
	ObjectCoordinate *Coordinate   `protobuf:"bytes,12,opt,name=object_coordinate,json=objectCoordinate,proto3" json:"object_coordinate,omitempty"`       // optional: object coordinates within the image
	Mask             []*Coordinate `protobuf:"bytes,13,rep,name=mask,proto3" json:"mask,omitempty"`                                                       // optional" object mask (polygon)
	ObjectSignature  []float64     `protobuf:"fixed64,14,rep,packed,name=object_signature,json=objectSignature,proto3" json:"object_signature,omitempty"` // optional: signature of the detected item
	MlModel          string        `protobuf:"bytes,15,opt,name=ml_model,json=mlModel,proto3" json:"ml_model,omitempty"`                                  // optional: description of the module that generated this event
	MlModelVersion   string        `protobuf:"bytes,16,opt,name=ml_model_version,json=mlModelVersion,proto3" json:"ml_model_version,omitempty"`           // optional: version of the ML model
	Width            int32         `protobuf:"varint,17,opt,name=width,proto3" json:"width,omitempty"`                                                    // optional: image width
	Height           int32         `protobuf:"varint,18,opt,name=height,proto3" json:"height,omitempty"`                                                  // optional: image height
	IsKeyframe       bool          `protobuf:"varint,19,opt,name=is_keyframe,json=isKeyframe,proto3" json:"is_keyframe,omitempty"`                        // optional: true/false if this annotation is from keyframe
	VideoType        string        `protobuf:"bytes,20,opt,name=video_type,json=videoType,proto3" json:"video_type,omitempty"`                            // optional: e.g. mp4 filename, live stream, ...
	OffsetTimestamp  int64         `protobuf:"varint,21,opt,name=offset_timestamp,json=offsetTimestamp,proto3" json:"offset_timestamp,omitempty"`         // optional: offset from the beginning
	OffsetDuration   int64         `protobuf:"varint,22,opt,name=offset_duration,json=offsetDuration,proto3" json:"offset_duration,omitempty"`            // optional: duration from the offset
	OffsetFrameId    int64         `protobuf:"varint,23,opt,name=offset_frame_id,json=offsetFrameId,proto3" json:"offset_frame_id,omitempty"`             // optional: frame id of the
	OffsetPacketId   int64         `protobuf:"varint,24,opt,name=offset_packet_id,json=offsetPacketId,proto3" json:"offset_packet_id,omitempty"`          // optional: offset of the packet
	// extending the event message meta data (optional)
	CustomMeta_1 string `protobuf:"bytes,25,opt,name=custom_meta_1,json=customMeta1,proto3" json:"custom_meta_1,omitempty"` // e.g. gender, hair, car model, ...
	CustomMeta_2 string `protobuf:"bytes,26,opt,name=custom_meta_2,json=customMeta2,proto3" json:"custom_meta_2,omitempty"`
	CustomMeta_3 string `protobuf:"bytes,27,opt,name=custom_meta_3,json=customMeta3,proto3" json:"custom_meta_3,omitempty"`
	CustomMeta_4 string `protobuf:"bytes,28,opt,name=custom_meta_4,json=customMeta4,proto3" json:"custom_meta_4,omitempty"`
	CustomMeta_5 string `protobuf:"bytes,29,opt,name=custom_meta_5,json=customMeta5,proto3" json:"custom_meta_5,omitempty"`
}

func (x *AnnotateRequest) Reset() {
	*x = AnnotateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotateRequest) ProtoMessage() {}

func (x *AnnotateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotateRequest.ProtoReflect.Descriptor instead.
func (*AnnotateRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *AnnotateRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AnnotateRequest) GetRemoteStreamId() string {
	if x != nil {
		return x.RemoteStreamId
	}
	return ""
}

func (x *AnnotateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AnnotateRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *AnnotateRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *AnnotateRequest) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *AnnotateRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *AnnotateRequest) GetObjectTrackingId() string {
	if x != nil {
		return x.ObjectTrackingId
	}
	return ""
}

func (x *AnnotateRequest) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *AnnotateRequest) GetObjectBoudingBox() *BoudingBox {
	if x != nil {
		return x.ObjectBoudingBox
	}
	return nil
}

func (x *AnnotateRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *AnnotateRequest) GetObjectCoordinate() *Coordinate {
	if x != nil {
		return x.ObjectCoordinate
	}
	return nil
}

func (x *AnnotateRequest) GetMask() []*Coordinate {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *AnnotateRequest) GetObjectSignature() []float64 {
	if x != nil {
		return x.ObjectSignature
	}
	return nil
}

func (x *AnnotateRequest) GetMlModel() string {
	if x != nil {
		return x.MlModel
	}
	return ""
}

func (x *AnnotateRequest) GetMlModelVersion() string {
	if x != nil {
		return x.MlModelVersion
	}
	return ""
}

func (x *AnnotateRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AnnotateRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AnnotateRequest) GetIsKeyframe() bool {
	if x != nil {
		return x.IsKeyframe
	}
	return false
}

func (x *AnnotateRequest) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

func (x *AnnotateRequest) GetOffsetTimestamp() int64 {
	if x != nil {
		return x.OffsetTimestamp
	}
	return 0
}

func (x *AnnotateRequest) GetOffsetDuration() int64 {
	if x != nil {
		return x.OffsetDuration
	}
	return 0
}

func (x *AnnotateRequest) GetOffsetFrameId() int64 {
	if x != nil {
		return x.OffsetFrameId
	}
	return 0
}

func (x *AnnotateRequest) GetOffsetPacketId() int64 {
	if x != nil {
		return x.OffsetPacketId
	}
	return 0
}

func (x *AnnotateRequest) GetCustomMeta_1() string {
	if x != nil {
		return x.CustomMeta_1
	}
	return ""
}

func (x *AnnotateRequest) GetCustomMeta_2() string {
	if x != nil {
		return x.CustomMeta_2
	}
	return ""
}

func (x *AnnotateRequest) GetCustomMeta_3() string {
	if x != nil {
		return x.CustomMeta_3
	}
	return ""
}

func (x *AnnotateRequest) GetCustomMeta_4() string {
	if x != nil {
		return x.CustomMeta_4
	}
	return ""
}

func (x *AnnotateRequest) GetCustomMeta_5() string {
	if x != nil {
		return x.CustomMeta_5
	}
	return ""
}

type AnnotateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName     string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	RemoteStreamId string `protobuf:"bytes,2,opt,name=remote_stream_id,json=remoteStreamId,proto3" json:"remote_stream_id,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	StartTimestamp int64  `protobuf:"varint,4,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
}

func (x *AnnotateResponse) Reset() {
	*x = AnnotateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotateResponse) ProtoMessage() {}

func (x *AnnotateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotateResponse.ProtoReflect.Descriptor instead.
func (*AnnotateResponse) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{1}
}

func (x *AnnotateResponse) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AnnotateResponse) GetRemoteStreamId() string {
	if x != nil {
		return x.RemoteStreamId
	}
	return ""
}

func (x *AnnotateResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AnnotateResponse) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"` // latitude
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"` // longitude
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{3}
}

func (x *Coordinate) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinate) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Coordinate) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type BoudingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top    int32 `protobuf:"varint,1,opt,name=top,proto3" json:"top,omitempty"`
	Left   int32 `protobuf:"varint,2,opt,name=left,proto3" json:"left,omitempty"`
	Width  int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *BoudingBox) Reset() {
	*x = BoudingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoudingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoudingBox) ProtoMessage() {}

func (x *BoudingBox) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoudingBox.ProtoReflect.Descriptor instead.
func (*BoudingBox) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{4}
}

func (x *BoudingBox) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *BoudingBox) GetLeft() int32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *BoudingBox) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *BoudingBox) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Video Streaming messages
type ShapeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim []*ShapeProto_Dim `protobuf:"bytes,2,rep,name=dim,proto3" json:"dim,omitempty"`
}

func (x *ShapeProto) Reset() {
	*x = ShapeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeProto) ProtoMessage() {}

func (x *ShapeProto) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeProto.ProtoReflect.Descriptor instead.
func (*ShapeProto) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{5}
}

func (x *ShapeProto) GetDim() []*ShapeProto_Dim {
	if x != nil {
		return x.Dim
	}
	return nil
}

type VideoFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width      int64       `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height     int64       `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Data       []byte      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp  int64       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsKeyframe bool        `protobuf:"varint,5,opt,name=is_keyframe,json=isKeyframe,proto3" json:"is_keyframe,omitempty"`
	Pts        int64       `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Dts        int64       `protobuf:"varint,7,opt,name=dts,proto3" json:"dts,omitempty"`
	FrameType  string      `protobuf:"bytes,8,opt,name=frame_type,json=frameType,proto3" json:"frame_type,omitempty"`
	IsCorrupt  bool        `protobuf:"varint,9,opt,name=is_corrupt,json=isCorrupt,proto3" json:"is_corrupt,omitempty"`
	TimeBase   float64     `protobuf:"fixed64,10,opt,name=time_base,json=timeBase,proto3" json:"time_base,omitempty"`
	Shape      *ShapeProto `protobuf:"bytes,11,opt,name=shape,proto3" json:"shape,omitempty"`
	DeviceId   string      `protobuf:"bytes,12,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Packet     int64       `protobuf:"varint,13,opt,name=packet,proto3" json:"packet,omitempty"`
	Keyframe   int64       `protobuf:"varint,14,opt,name=keyframe,proto3" json:"keyframe,omitempty"`
	Extradata  []byte      `protobuf:"bytes,15,opt,name=extradata,proto3" json:"extradata,omitempty"`
	CodecName  string      `protobuf:"bytes,16,opt,name=codec_name,json=codecName,proto3" json:"codec_name,omitempty"`
	PixFmt     string      `protobuf:"bytes,17,opt,name=pix_fmt,json=pixFmt,proto3" json:"pix_fmt,omitempty"`
}

func (x *VideoFrame) Reset() {
	*x = VideoFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrame) ProtoMessage() {}

func (x *VideoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrame.ProtoReflect.Descriptor instead.
func (*VideoFrame) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{6}
}

func (x *VideoFrame) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoFrame) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoFrame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VideoFrame) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VideoFrame) GetIsKeyframe() bool {
	if x != nil {
		return x.IsKeyframe
	}
	return false
}

func (x *VideoFrame) GetPts() int64 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *VideoFrame) GetDts() int64 {
	if x != nil {
		return x.Dts
	}
	return 0
}

func (x *VideoFrame) GetFrameType() string {
	if x != nil {
		return x.FrameType
	}
	return ""
}

func (x *VideoFrame) GetIsCorrupt() bool {
	if x != nil {
		return x.IsCorrupt
	}
	return false
}

func (x *VideoFrame) GetTimeBase() float64 {
	if x != nil {
		return x.TimeBase
	}
	return 0
}

func (x *VideoFrame) GetShape() *ShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *VideoFrame) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *VideoFrame) GetPacket() int64 {
	if x != nil {
		return x.Packet
	}
	return 0
}

func (x *VideoFrame) GetKeyframe() int64 {
	if x != nil {
		return x.Keyframe
	}
	return 0
}

func (x *VideoFrame) GetExtradata() []byte {
	if x != nil {
		return x.Extradata
	}
	return nil
}

func (x *VideoFrame) GetCodecName() string {
	if x != nil {
		return x.CodecName
	}
	return ""
}

func (x *VideoFrame) GetPixFmt() string {
	if x != nil {
		return x.PixFmt
	}
	return ""
}

type VideoFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyFrameOnly bool   `protobuf:"varint,1,opt,name=key_frame_only,json=keyFrameOnly,proto3" json:"key_frame_only,omitempty"`
	DeviceId     string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *VideoFrameRequest) Reset() {
	*x = VideoFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrameRequest) ProtoMessage() {}

func (x *VideoFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrameRequest.ProtoReflect.Descriptor instead.
func (*VideoFrameRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{7}
}

func (x *VideoFrameRequest) GetKeyFrameOnly() bool {
	if x != nil {
		return x.KeyFrameOnly
	}
	return false
}

func (x *VideoFrameRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type VideoFrameBufferedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId      string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	TimestampFrom int64  `protobuf:"varint,2,opt,name=timestamp_from,json=timestampFrom,proto3" json:"timestamp_from,omitempty"`
	TimestampTo   int64  `protobuf:"varint,3,opt,name=timestamp_to,json=timestampTo,proto3" json:"timestamp_to,omitempty"`
}

func (x *VideoFrameBufferedRequest) Reset() {
	*x = VideoFrameBufferedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFrameBufferedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrameBufferedRequest) ProtoMessage() {}

func (x *VideoFrameBufferedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrameBufferedRequest.ProtoReflect.Descriptor instead.
func (*VideoFrameBufferedRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{8}
}

func (x *VideoFrameBufferedRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *VideoFrameBufferedRequest) GetTimestampFrom() int64 {
	if x != nil {
		return x.TimestampFrom
	}
	return 0
}

func (x *VideoFrameBufferedRequest) GetTimestampTo() int64 {
	if x != nil {
		return x.TimestampTo
	}
	return 0
}

// ListStream messages
type ListStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	FailingStreak int64  `protobuf:"varint,3,opt,name=failing_streak,json=failingStreak,proto3" json:"failing_streak,omitempty"`
	HealthStatus  string `protobuf:"bytes,4,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	Dead          bool   `protobuf:"varint,5,opt,name=dead,proto3" json:"dead,omitempty"`
	ExitCode      int64  `protobuf:"varint,6,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Pid           int32  `protobuf:"varint,7,opt,name=pid,proto3" json:"pid,omitempty"`
	Running       bool   `protobuf:"varint,8,opt,name=running,proto3" json:"running,omitempty"`
	Paused        bool   `protobuf:"varint,9,opt,name=paused,proto3" json:"paused,omitempty"`
	Restarting    bool   `protobuf:"varint,10,opt,name=restarting,proto3" json:"restarting,omitempty"`
	Oomkilled     bool   `protobuf:"varint,11,opt,name=oomkilled,proto3" json:"oomkilled,omitempty"`
	Error         string `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ListStream) Reset() {
	*x = ListStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStream) ProtoMessage() {}

func (x *ListStream) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStream.ProtoReflect.Descriptor instead.
func (*ListStream) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{9}
}

func (x *ListStream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListStream) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListStream) GetFailingStreak() int64 {
	if x != nil {
		return x.FailingStreak
	}
	return 0
}

func (x *ListStream) GetHealthStatus() string {
	if x != nil {
		return x.HealthStatus
	}
	return ""
}

func (x *ListStream) GetDead() bool {
	if x != nil {
		return x.Dead
	}
	return false
}

func (x *ListStream) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ListStream) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ListStream) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *ListStream) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *ListStream) GetRestarting() bool {
	if x != nil {
		return x.Restarting
	}
	return false
}

func (x *ListStream) GetOomkilled() bool {
	if x != nil {
		return x.Oomkilled
	}
	return false
}

func (x *ListStream) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStreamRequest) Reset() {
	*x = ListStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamRequest) ProtoMessage() {}

func (x *ListStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamRequest.ProtoReflect.Descriptor instead.
func (*ListStreamRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{10}
}

// Proxy messages
type ProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId    string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Passthrough bool   `protobuf:"varint,2,opt,name=passthrough,proto3" json:"passthrough,omitempty"` // true = passthrough streaming, false = stop passthrough streaming
}

func (x *ProxyRequest) Reset() {
	*x = ProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyRequest) ProtoMessage() {}

func (x *ProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyRequest.ProtoReflect.Descriptor instead.
func (*ProxyRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{11}
}

func (x *ProxyRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ProxyRequest) GetPassthrough() bool {
	if x != nil {
		return x.Passthrough
	}
	return false
}

type ProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId    string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Passthrough bool   `protobuf:"varint,2,opt,name=passthrough,proto3" json:"passthrough,omitempty"`
}

func (x *ProxyResponse) Reset() {
	*x = ProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyResponse) ProtoMessage() {}

func (x *ProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyResponse.ProtoReflect.Descriptor instead.
func (*ProxyResponse) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{12}
}

func (x *ProxyResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ProxyResponse) GetPassthrough() bool {
	if x != nil {
		return x.Passthrough
	}
	return false
}

// Storage messages
type StorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Start    bool   `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *StorageRequest) Reset() {
	*x = StorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRequest) ProtoMessage() {}

func (x *StorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRequest.ProtoReflect.Descriptor instead.
func (*StorageRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{13}
}

func (x *StorageRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StorageRequest) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

type StorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Start    bool   `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *StorageResponse) Reset() {
	*x = StorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageResponse) ProtoMessage() {}

func (x *StorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageResponse.ProtoReflect.Descriptor instead.
func (*StorageResponse) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{14}
}

func (x *StorageResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StorageResponse) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

// VideoCodec information about the stream
type VideoCodec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Width         int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PixFmt        string `protobuf:"bytes,4,opt,name=pix_fmt,json=pixFmt,proto3" json:"pix_fmt,omitempty"`
	Extradata     []byte `protobuf:"bytes,5,opt,name=extradata,proto3" json:"extradata,omitempty"`
	ExtradataSize int32  `protobuf:"varint,6,opt,name=extradata_size,json=extradataSize,proto3" json:"extradata_size,omitempty"`
	LongName      string `protobuf:"bytes,7,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
}

func (x *VideoCodec) Reset() {
	*x = VideoCodec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCodec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCodec) ProtoMessage() {}

func (x *VideoCodec) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCodec.ProtoReflect.Descriptor instead.
func (*VideoCodec) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{15}
}

func (x *VideoCodec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoCodec) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoCodec) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoCodec) GetPixFmt() string {
	if x != nil {
		return x.PixFmt
	}
	return ""
}

func (x *VideoCodec) GetExtradata() []byte {
	if x != nil {
		return x.Extradata
	}
	return nil
}

func (x *VideoCodec) GetExtradataSize() int32 {
	if x != nil {
		return x.ExtradataSize
	}
	return 0
}

func (x *VideoCodec) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

type VideoProbeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *VideoProbeRequest) Reset() {
	*x = VideoProbeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoProbeRequest) ProtoMessage() {}

func (x *VideoProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoProbeRequest.ProtoReflect.Descriptor instead.
func (*VideoProbeRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{16}
}

func (x *VideoProbeRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type VideoProbeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoCodec *VideoCodec  `protobuf:"bytes,1,opt,name=video_codec,json=videoCodec,proto3" json:"video_codec,omitempty"`
	Buffer     *VideoBuffer `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *VideoProbeResponse) Reset() {
	*x = VideoProbeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoProbeResponse) ProtoMessage() {}

func (x *VideoProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoProbeResponse.ProtoReflect.Descriptor instead.
func (*VideoProbeResponse) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{17}
}

func (x *VideoProbeResponse) GetVideoCodec() *VideoCodec {
	if x != nil {
		return x.VideoCodec
	}
	return nil
}

func (x *VideoProbeResponse) GetBuffer() *VideoBuffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type VideoBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime       int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DurationSeconds int64 `protobuf:"varint,3,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	ApproximateFps  int32 `protobuf:"varint,4,opt,name=approximate_fps,json=approximateFps,proto3" json:"approximate_fps,omitempty"`
	Frames          int64 `protobuf:"varint,5,opt,name=frames,proto3" json:"frames,omitempty"`
}

func (x *VideoBuffer) Reset() {
	*x = VideoBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoBuffer) ProtoMessage() {}

func (x *VideoBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoBuffer.ProtoReflect.Descriptor instead.
func (*VideoBuffer) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{18}
}

func (x *VideoBuffer) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VideoBuffer) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VideoBuffer) GetDurationSeconds() int64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *VideoBuffer) GetApproximateFps() int32 {
	if x != nil {
		return x.ApproximateFps
	}
	return 0
}

func (x *VideoBuffer) GetFrames() int64 {
	if x != nil {
		return x.Frames
	}
	return 0
}

type SystemTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTime int64 `protobuf:"varint,1,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
}

func (x *SystemTimeResponse) Reset() {
	*x = SystemTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTimeResponse) ProtoMessage() {}

func (x *SystemTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTimeResponse.ProtoReflect.Descriptor instead.
func (*SystemTimeResponse) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{19}
}

func (x *SystemTimeResponse) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

type SystemTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTimeRequest) Reset() {
	*x = SystemTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTimeRequest) ProtoMessage() {}

func (x *SystemTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTimeRequest.ProtoReflect.Descriptor instead.
func (*SystemTimeRequest) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{20}
}

type ShapeProto_Dim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of image in that dimension (-1 means unknown dimension)
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// optional name of image dimension
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ShapeProto_Dim) Reset() {
	*x = ShapeProto_Dim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_streaming_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeProto_Dim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeProto_Dim) ProtoMessage() {}

func (x *ShapeProto_Dim) ProtoReflect() protoreflect.Message {
	mi := &file_video_streaming_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeProto_Dim.ProtoReflect.Descriptor instead.
func (*ShapeProto_Dim) Descriptor() ([]byte, []int) {
	return file_video_streaming_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ShapeProto_Dim) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ShapeProto_Dim) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_video_streaming_proto protoreflect.FileDescriptor

var file_video_streaming_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x22, 0xcb, 0x09, 0x0a, 0x0f,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68,
	0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68,
	0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x32, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x33, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x33, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x34, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x34, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x35, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x35, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x60,
	0x0a, 0x0a, 0x42, 0x6f, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x81, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x44, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x6d,
	0x52, 0x03, 0x64, 0x69, 0x6d, 0x1a, 0x2d, 0x0a, 0x03, 0x44, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x78, 0x5f, 0x66,
	0x6d, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x78, 0x46, 0x6d, 0x74,
	0x22, 0x56, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b,
	0x65, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x22, 0xcd, 0x02,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6f, 0x6d,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6f,
	0x6d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x13, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x22, 0x4e, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x22, 0x43, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xc9, 0x01, 0x0a,
	0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x69, 0x78, 0x5f, 0x66, 0x6d, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x69, 0x78, 0x46, 0x6d, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x12, 0x47, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x0b,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x37, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0xe5, 0x07, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x35, 0x2e,
	0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x2e,
	0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x7d, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x35,
	0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x78, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x35,
	0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x08, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x72,
	0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x2e, 0x63, 0x68,
	0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x2e,
	0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x63, 0x68, 0x72, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_streaming_proto_rawDescOnce sync.Once
	file_video_streaming_proto_rawDescData = file_video_streaming_proto_rawDesc
)

func file_video_streaming_proto_rawDescGZIP() []byte {
	file_video_streaming_proto_rawDescOnce.Do(func() {
		file_video_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_streaming_proto_rawDescData)
	})
	return file_video_streaming_proto_rawDescData
}

var file_video_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_video_streaming_proto_goTypes = []interface{}{
	(*AnnotateRequest)(nil),           // 0: chrys.cloud.videostreaming.v1beta1.AnnotateRequest
	(*AnnotateResponse)(nil),          // 1: chrys.cloud.videostreaming.v1beta1.AnnotateResponse
	(*Location)(nil),                  // 2: chrys.cloud.videostreaming.v1beta1.Location
	(*Coordinate)(nil),                // 3: chrys.cloud.videostreaming.v1beta1.Coordinate
	(*BoudingBox)(nil),                // 4: chrys.cloud.videostreaming.v1beta1.BoudingBox
	(*ShapeProto)(nil),                // 5: chrys.cloud.videostreaming.v1beta1.ShapeProto
	(*VideoFrame)(nil),                // 6: chrys.cloud.videostreaming.v1beta1.VideoFrame
	(*VideoFrameRequest)(nil),         // 7: chrys.cloud.videostreaming.v1beta1.VideoFrameRequest
	(*VideoFrameBufferedRequest)(nil), // 8: chrys.cloud.videostreaming.v1beta1.VideoFrameBufferedRequest
	(*ListStream)(nil),                // 9: chrys.cloud.videostreaming.v1beta1.ListStream
	(*ListStreamRequest)(nil),         // 10: chrys.cloud.videostreaming.v1beta1.ListStreamRequest
	(*ProxyRequest)(nil),              // 11: chrys.cloud.videostreaming.v1beta1.ProxyRequest
	(*ProxyResponse)(nil),             // 12: chrys.cloud.videostreaming.v1beta1.ProxyResponse
	(*StorageRequest)(nil),            // 13: chrys.cloud.videostreaming.v1beta1.StorageRequest
	(*StorageResponse)(nil),           // 14: chrys.cloud.videostreaming.v1beta1.StorageResponse
	(*VideoCodec)(nil),                // 15: chrys.cloud.videostreaming.v1beta1.VideoCodec
	(*VideoProbeRequest)(nil),         // 16: chrys.cloud.videostreaming.v1beta1.VideoProbeRequest
	(*VideoProbeResponse)(nil),        // 17: chrys.cloud.videostreaming.v1beta1.VideoProbeResponse
	(*VideoBuffer)(nil),               // 18: chrys.cloud.videostreaming.v1beta1.VideoBuffer
	(*SystemTimeResponse)(nil),        // 19: chrys.cloud.videostreaming.v1beta1.SystemTimeResponse
	(*SystemTimeRequest)(nil),         // 20: chrys.cloud.videostreaming.v1beta1.SystemTimeRequest
	(*ShapeProto_Dim)(nil),            // 21: chrys.cloud.videostreaming.v1beta1.ShapeProto.Dim
}
var file_video_streaming_proto_depIdxs = []int32{
	4,  // 0: chrys.cloud.videostreaming.v1beta1.AnnotateRequest.object_bouding_box:type_name -> chrys.cloud.videostreaming.v1beta1.BoudingBox
	2,  // 1: chrys.cloud.videostreaming.v1beta1.AnnotateRequest.location:type_name -> chrys.cloud.videostreaming.v1beta1.Location
	3,  // 2: chrys.cloud.videostreaming.v1beta1.AnnotateRequest.object_coordinate:type_name -> chrys.cloud.videostreaming.v1beta1.Coordinate
	3,  // 3: chrys.cloud.videostreaming.v1beta1.AnnotateRequest.mask:type_name -> chrys.cloud.videostreaming.v1beta1.Coordinate
	21, // 4: chrys.cloud.videostreaming.v1beta1.ShapeProto.dim:type_name -> chrys.cloud.videostreaming.v1beta1.ShapeProto.Dim
	5,  // 5: chrys.cloud.videostreaming.v1beta1.VideoFrame.shape:type_name -> chrys.cloud.videostreaming.v1beta1.ShapeProto
	15, // 6: chrys.cloud.videostreaming.v1beta1.VideoProbeResponse.video_codec:type_name -> chrys.cloud.videostreaming.v1beta1.VideoCodec
	18, // 7: chrys.cloud.videostreaming.v1beta1.VideoProbeResponse.buffer:type_name -> chrys.cloud.videostreaming.v1beta1.VideoBuffer
	7,  // 8: chrys.cloud.videostreaming.v1beta1.Image.VideoLatestImage:input_type -> chrys.cloud.videostreaming.v1beta1.VideoFrameRequest
	8,  // 9: chrys.cloud.videostreaming.v1beta1.Image.VideoBufferedImage:input_type -> chrys.cloud.videostreaming.v1beta1.VideoFrameBufferedRequest
	16, // 10: chrys.cloud.videostreaming.v1beta1.Image.VideoProbe:input_type -> chrys.cloud.videostreaming.v1beta1.VideoProbeRequest
	10, // 11: chrys.cloud.videostreaming.v1beta1.Image.ListStreams:input_type -> chrys.cloud.videostreaming.v1beta1.ListStreamRequest
	0,  // 12: chrys.cloud.videostreaming.v1beta1.Image.Annotate:input_type -> chrys.cloud.videostreaming.v1beta1.AnnotateRequest
	11, // 13: chrys.cloud.videostreaming.v1beta1.Image.Proxy:input_type -> chrys.cloud.videostreaming.v1beta1.ProxyRequest
	13, // 14: chrys.cloud.videostreaming.v1beta1.Image.Storage:input_type -> chrys.cloud.videostreaming.v1beta1.StorageRequest
	20, // 15: chrys.cloud.videostreaming.v1beta1.Image.SystemTime:input_type -> chrys.cloud.videostreaming.v1beta1.SystemTimeRequest
	6,  // 16: chrys.cloud.videostreaming.v1beta1.Image.VideoLatestImage:output_type -> chrys.cloud.videostreaming.v1beta1.VideoFrame
	6,  // 17: chrys.cloud.videostreaming.v1beta1.Image.VideoBufferedImage:output_type -> chrys.cloud.videostreaming.v1beta1.VideoFrame
	17, // 18: chrys.cloud.videostreaming.v1beta1.Image.VideoProbe:output_type -> chrys.cloud.videostreaming.v1beta1.VideoProbeResponse
	9,  // 19: chrys.cloud.videostreaming.v1beta1.Image.ListStreams:output_type -> chrys.cloud.videostreaming.v1beta1.ListStream
	1,  // 20: chrys.cloud.videostreaming.v1beta1.Image.Annotate:output_type -> chrys.cloud.videostreaming.v1beta1.AnnotateResponse
	12, // 21: chrys.cloud.videostreaming.v1beta1.Image.Proxy:output_type -> chrys.cloud.videostreaming.v1beta1.ProxyResponse
	14, // 22: chrys.cloud.videostreaming.v1beta1.Image.Storage:output_type -> chrys.cloud.videostreaming.v1beta1.StorageResponse
	19, // 23: chrys.cloud.videostreaming.v1beta1.Image.SystemTime:output_type -> chrys.cloud.videostreaming.v1beta1.SystemTimeResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_video_streaming_proto_init() }
func file_video_streaming_proto_init() {
	if File_video_streaming_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_streaming_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoudingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFrameBufferedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCodec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_streaming_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoProbeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil